import streamlit as st

from src.backend import generate_pizza_image


def paint_pizza_image(toppings, img_gen_model, mock):
    st.image(generate_pizza_image(toppings, img_gen_model, mock=mock), width=400)
    if not mock:
        st.write(f"generated by {img_gen_model}")


def app_main_frame(pizza_config, predicted_price, img_gen_model):
    st.title("Pizza Price Predictor")
    paint_pizza_image(pizza_config.toppings, img_gen_model, mock=True)
    st.header(f"**{predicted_price:.2f}** €".replace(".", ","))


def app_sidebar():
    st.sidebar.write("Toppings")
    toppings = []
    from src.app import TOPPINGS
    for i, (name, vals) in enumerate(TOPPINGS.items()):
        toppings.append(st.sidebar.selectbox(label=f"#{i + 1} - {name}", options=([f"no {name}"] + vals),
                                             label_visibility="collapsed"))

    size_labels = {0: "Small", 1: "Large", 2: "Big"}
    pizza_size = st.sidebar.select_slider("Size", [0, 1, 2], 1, format_func=lambda x: size_labels[x])
    extra_sauce = st.sidebar.toggle("Extra Sauce")
    extra_cheese = st.sidebar.toggle("Extra Cheese")
    distance = st.sidebar.select_slider("Distance from City Center", [1, 3, 5, 10], format_func=lambda x: f"{x}km")
    location_labels = {0: "Take-Away", 1: "Dine-In"}
    location_choice = st.sidebar.radio("Location", [0, 1], format_func=lambda x: location_labels[x])
    rating = st.sidebar.select_slider("Restaurant Raiting", [1, 2, 3, 4, 5, 6], format_func=lambda x: f"{x * '★'}")

    from src.app import PizzaConfig
    return PizzaConfig(
        toppings=toppings,
        size=pizza_size,
        extra_sauce=extra_sauce,
        extra_cheese=extra_cheese,
        distance=distance,
        location=location_choice,
        rating=rating
    )
